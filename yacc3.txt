YACC PART:

CODE:(vid.y)

%{
#include<stdio.h>
#include<stdlib.h>
%}

%token DIGIT LETTER UND NL

%%
stmt: variable NL {printf("valid identifiers\n"); exit(0);}
;
variable: LETTER alphanumeric
;
alphanumeric: LETTER alphanumeric | DIGIT alphanumeric | UND alphanumeric | LETTER | DIGIT | UND
;

%%

int yyerror(char *msg)
{
 printf("Invalid variable\n");
 exit(0);
}

main()
{
 printf("enter the variable: \n");
 yyparse();
}


LEX PART:(vid.l)

CODE:

%{
#include"y.tab.h"
%}

%%
[a-zA-Z] {return LETTER;}
[0-9] {return DIGIT;}
[_] {return UND;}
[\n] {return NL;}
. {return yytext[0];}
%%


OUTPUT :


yacc -d vid.y
lex vid.l
cc y.tab.c lex.yy.c -ly -ll
./a.out
enter the variable: 
abc
valid identifiers


yacc -d vid.y
lex vid.l
 cc y.tab.c lex.yy.c -ly -ll
 ./a.out
enter the variable: 
(+cd-)
Invalid variable
